service: () -> {
    deleteJob: (text) -> (variant {Ok:record {id:text; title:text; authorEmail:text; bookmark:int64; authorId:principal; createdAt:nat64; authorName:text; description:text; level:variant {Entry; Intermediate; Expert}; authorPhone:text; updatedAt:opt nat64; price:int64; skills:vec record {name:text}; payment:variant {Hourly; Monthly; Fixed}}; Err:variant {DuplicateUser:text; InvalidPayload:text; NotFound:text; AuthenticationError:text}});
    getCurrentUser: () -> (variant {Ok:text; Err:variant {DuplicateUser:text; InvalidPayload:text; NotFound:text; AuthenticationError:text}}) query;
    indexJob: () -> (variant {Ok:vec record {id:text; title:text; authorEmail:text; bookmark:int64; authorId:principal; createdAt:nat64; authorName:text; description:text; level:variant {Entry; Intermediate; Expert}; authorPhone:text; updatedAt:opt nat64; price:int64; skills:vec record {name:text}; payment:variant {Hourly; Monthly; Fixed}}; Err:variant {DuplicateUser:text; InvalidPayload:text; NotFound:text; AuthenticationError:text}}) query;
    logOut: () -> (variant {Ok:text; Err:variant {DuplicateUser:text; InvalidPayload:text; NotFound:text; AuthenticationError:text}});
    loginUser: (text, text) -> (variant {Ok:text; Err:variant {DuplicateUser:text; InvalidPayload:text; NotFound:text; AuthenticationError:text}});
    registerUser: (record {username:text; password:text; name:text; email:text; phone:text}) -> (variant {Ok:record {id:principal; username:text; password:text; name:text; createdAt:nat64; email:text; updatedAt:opt nat64; phone:text}; Err:variant {DuplicateUser:text; InvalidPayload:text; NotFound:text; AuthenticationError:text}});
    showJob: (text) -> (variant {Ok:record {id:text; title:text; authorEmail:text; bookmark:int64; authorId:principal; createdAt:nat64; authorName:text; description:text; level:variant {Entry; Intermediate; Expert}; authorPhone:text; updatedAt:opt nat64; price:int64; skills:vec record {name:text}; payment:variant {Hourly; Monthly; Fixed}}; Err:variant {DuplicateUser:text; InvalidPayload:text; NotFound:text; AuthenticationError:text}}) query;
    storeJob: (record {title:text; description:text; level:variant {Entry; Intermediate; Expert}; price:int64; skills:vec record {name:text}; payment:variant {Hourly; Monthly; Fixed}}) -> (variant {Ok:record {id:text; title:text; authorEmail:text; bookmark:int64; authorId:principal; createdAt:nat64; authorName:text; description:text; level:variant {Entry; Intermediate; Expert}; authorPhone:text; updatedAt:opt nat64; price:int64; skills:vec record {name:text}; payment:variant {Hourly; Monthly; Fixed}}; Err:variant {DuplicateUser:text; InvalidPayload:text; NotFound:text; AuthenticationError:text}});
    updateJob: (text, record {title:text; description:text; level:variant {Entry; Intermediate; Expert}; price:int64; skills:vec record {name:text}; payment:variant {Hourly; Monthly; Fixed}}) -> (variant {Ok:record {id:text; title:text; authorEmail:text; bookmark:int64; authorId:principal; createdAt:nat64; authorName:text; description:text; level:variant {Entry; Intermediate; Expert}; authorPhone:text; updatedAt:opt nat64; price:int64; skills:vec record {name:text}; payment:variant {Hourly; Monthly; Fixed}}; Err:variant {DuplicateUser:text; InvalidPayload:text; NotFound:text; AuthenticationError:text}});
}
